{"version":3,"file":"4.7a7813335cd29ee5dd83.hot-update.js","sources":["webpack:///components/menus.js"],"sourcesContent":["import axios from 'axios';\n\n\n// parse date to macth with format of JSON from ASPC such as 'fri\nvar options = { weekday: 'long' };\nvar week_day = new Date().toLocaleString('en-US', options)\nvar week_day_parsed = week_day.toLocaleLowerCase();\nweek_day_parsed = week_day_parsed.slice(0, 3);\n\n\n\nclass Menus extends React.Component {\n\n    // initial states\n    state = {\n        curTime: new Date().toLocaleString(),\n        arrayMenus: [],\n        fraryBreakfast: [],\n        fraryLunch: [],\n        fraryDinner: [],\n    }\n\n\n    //calls to fetch the data and create the clock like widget\n    componentDidMount() {\n        this.setDateTime();\n        this.renderData();\n    }\n\n    // API call\n    renderData() {\n        axios.get('https://aspc.pomona.edu/api/menu/?auth_token=5a828762c6abffeee0b12e06cb93c210fda7e93f')\n            .then(response => {\n                const menus_data = response.data;\n                this.setState({ arrayMenus: menus_data })\n                const menus = this.state.arrayMenus\n                const arraySize = this.state.arrayMenus.length\n\n                //populate array for breakfast, lunch, etc for each dining hall\n                for (var i = 0; i < arraySize; i++) {\n                    if (menus[i].dining_hall == 'frary' && menus[i].day == 'fri') {\n                        if (menus[i].meal == 'breakfast') {\n                            this.setState({ fraryBreakfast: menus[i].food_items })\n                        }else if (menus[i].meal == 'lunch') {\n                            this.setState({ fraryLunch: menus[i].food_items })\n                        }else if (menus[i].meal == 'dinner') {\n                            this.setState({ fraryDinner: menus[i].food_items })\n                        }\n                    }\n                }\n                console.log(this.state.fraryBreakfast);\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    }\n\n    // create time like widget \n    setDateTime() {\n        setInterval(() => {\n            this.setState({\n                curTime: new Date().toLocaleString()\n            })\n        }, 1000)\n    }\n\n    // render \n    render() {\n        // return the breakfast array for now, I suspect we are going to have to \n        // use a conditional and check the props passed in by each page and see \n        //if what dining hall is and render accordingly \n        //i.e if(this.props.diningHall == 'frary'){\n        //     render the frary elements \n        // }\n        return (\n            <div>\n                <br/>\n                <h6>The day and current time is: {this.state.curTime}</h6>\n                <br/>\n                <br/>\n                <h3>Breakfast</h3>\n                <ul className='list-group'>\n                    {this.state.fraryBreakfast.map(menu => <li key={menu.id}>{menu}</li>)}\n                </ul>\n                <br/>\n                <h3>Lunch</h3>\n                <ul className='list-group'>\n                    {this.state.fraryLunch.map(menu => <li key={menu.id}>{menu}</li>)}\n                </ul>\n                <br/>\n                <h3>Dinner</h3>\n                <ul className='list-group'>\n                    {this.state.fraryDinner.map(menu => <li key={menu.id}>{menu}</li>)}\n                </ul>\n            </div>\n\n\n        );\n    }\n\n\n\n}\n\nexport default Menus;\n\n\n// WEBPACK FOOTER //\n// components/menus.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;AAUA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAvFA;AACA;AA4FA;;;;A","sourceRoot":""}